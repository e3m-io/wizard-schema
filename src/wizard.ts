/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Condition = PredicateCondition | CompoundCondition;
export type Element = ControlElement | LayoutElement | SectionElement;

/**
 * Defines the steps and elements of a wizard sequence
 */
export interface WizardSchema {
  effects?: Effect[];
  initialState?: {
    [k: string]: unknown;
  };
  steps: Step[];
}
/**
 * Define `Action`s to run when a `Dependency` changes
 */
export interface Effect {
  /**
   * @minItems 1
   */
  actions: [Action, ...Action[]];
  /**
   * @minItems 1
   */
  dependencies: [string, ...string[]];
}
export interface Action {
  condition?: Condition;
  do: {
    set?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` ".".
       */
      [k: string]: string;
    };
    /**
     * @minItems 1
     */
    delete?: [string, ...string[]];
  };
}
export interface PredicateCondition {
  /**
   * This interface was referenced by `PredicateCondition`'s JSON-Schema definition
   * via the `patternProperty` ".".
   */
  [k: string]: {
    equals?: unknown;
    contains?: unknown;
    gte?: number;
    lte?: number;
    gt?: number;
    lt?: number;
  };
}
export interface CompoundCondition {
  /**
   * @minItems 2
   */
  AND?: [Condition, Condition, ...Condition[]];
  /**
   * @minItems 2
   */
  OR?: [Condition, Condition, ...Condition[]];
  NOT?: Condition;
}
export interface Step {
  id: string;
  elements?: Element[];
  children?: Step[];
  title: string;
  description?: string;
  enabled?: Condition;
  visible?: Condition;
}
export interface ControlElement {
  type: "Control";
  scope: string;
  label?: string;
  helpText?: string;
  hint?: string;
  disabled?: Condition;
  options?: {
    format?: string;
    [k: string]: unknown;
  };
}
export interface LayoutElement {
  type: "HorizontalLayout" | "VerticalLayout";
  elements: Element[];
}
export interface SectionElement {
  type: "Section";
  elements: Element[];
  title: string;
}
